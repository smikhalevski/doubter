import { inspect } from './inspect.ts';
import type { Issue, Message } from './types.ts';

export const ERROR_SYNC_UNSUPPORTED = 'Shape is async, use tryAsync, parseAsync, or parseOrDefaultAsync.';
export const ERROR_SHAPE_EXPECTED = 'Provider must return a shape. Are you accessing a lazy shape prematurely?';
export const ERROR_ASYNC_FUNCTION = 'The function signature is constrained by async shapes, use ensureAsync.';

export const CODE_ANY_DENY = 'any.deny';
export const CODE_ANY_EXCLUDE = 'any.exclude';
export const CODE_ANY_REFINE = 'any.refine';
export const CODE_ARRAY_INCLUDES = 'array.includes';
export const CODE_ARRAY_MIN = 'array.min';
export const CODE_ARRAY_MAX = 'array.max';
export const CODE_BIGINT_MIN = 'bigint.min';
export const CODE_BIGINT_MAX = 'bigint.max';
export const CODE_DATE_MIN = 'date.min';
export const CODE_DATE_MAX = 'date.max';
export const CODE_NUMBER_FINITE = 'number.finite';
export const CODE_NUMBER_INT = 'number.int';
export const CODE_NUMBER_GT = 'number.gt';
export const CODE_NUMBER_GTE = 'number.gte';
export const CODE_NUMBER_LT = 'number.lt';
export const CODE_NUMBER_LTE = 'number.lte';
export const CODE_NUMBER_MULTIPLE_OF = 'number.multipleOf';
export const CODE_OBJECT_ALL_KEYS = 'object.allKeys';
export const CODE_OBJECT_NOT_ALL_KEYS = 'object.notAllKeys';
export const CODE_OBJECT_OR_KEYS = 'object.orKeys';
export const CODE_OBJECT_XOR_KEYS = 'object.xorKeys';
export const CODE_OBJECT_OXOR_KEYS = 'object.oxorKeys';
export const CODE_OBJECT_EXACT = 'object.exact';
export const CODE_OBJECT_PLAIN = 'object.plain';
export const CODE_SET_MIN = 'set.min';
export const CODE_SET_MAX = 'set.max';
export const CODE_STRING_NON_BLANK = 'string.nonBlank';
export const CODE_STRING_MIN = 'string.min';
export const CODE_STRING_MAX = 'string.max';
export const CODE_STRING_REGEX = 'string.regex';
export const CODE_STRING_INCLUDES = 'string.includes';
export const CODE_STRING_STARTS_WITH = 'string.startsWith';
export const CODE_STRING_ENDS_WITH = 'string.endsWith';
export const CODE_TYPE_ARRAY = 'type.array';
export const CODE_TYPE_BIGINT = 'type.bigint';
export const CODE_TYPE_BOOLEAN = 'type.boolean';
export const CODE_TYPE_CONST = 'type.const';
export const CODE_TYPE_DATE = 'type.date';
export const CODE_TYPE_ENUM = 'type.enum';
export const CODE_TYPE_FUNCTION = 'type.function';
export const CODE_TYPE_INSTANCE_OF = 'type.instanceOf';
export const CODE_TYPE_INTERSECTION = 'type.intersection';
export const CODE_TYPE_MAP = 'type.map';
export const CODE_TYPE_NEVER = 'type.never';
export const CODE_TYPE_NUMBER = 'type.number';
export const CODE_TYPE_OBJECT = 'type.object';
export const CODE_TYPE_PROMISE = 'type.promise';
export const CODE_TYPE_TUPLE = 'type.tuple';
export const CODE_TYPE_SET = 'type.set';
export const CODE_TYPE_STRING = 'type.string';
export const CODE_TYPE_SYMBOL = 'type.symbol';
export const CODE_TYPE_UNION = 'type.union';

export const MESSAGE_ANY_DENY: Message = issue => 'Must not be equal to ' + inspect(issue.param);
export const MESSAGE_ANY_EXCLUDE: Message = 'Must not conform the excluded shape';
export const MESSAGE_ANY_REFINE: Message = 'Must conform the predicate';
export const MESSAGE_ARRAY_INCLUDES: Message = 'Must include a value';
export const MESSAGE_ARRAY_MAX: Message = issue => 'Must have the maximum length of ' + inspect(issue.param);
export const MESSAGE_ARRAY_MIN: Message = issue => 'Must have the minimum length of ' + inspect(issue.param);
export const MESSAGE_BIGINT_MIN: Message = issue => 'Must be greater than or equal to ' + inspect(issue.param);
export const MESSAGE_BIGINT_MAX: Message = issue => 'Must be less than or equal to ' + inspect(issue.param);
export const MESSAGE_DATE_MIN: Message = issue => 'Must be after ' + inspect(issue.param);
export const MESSAGE_DATE_MAX: Message = issue => 'Must be before ' + inspect(issue.param);
export const MESSAGE_NUMBER_FINITE: Message = 'Must be a finite number';
export const MESSAGE_NUMBER_INT: Message = 'Must be an integer';
export const MESSAGE_NUMBER_GT: Message = issue => 'Must be greater than ' + inspect(issue.param);
export const MESSAGE_NUMBER_GTE: Message = issue => 'Must be greater than or equal to ' + inspect(issue.param);
export const MESSAGE_NUMBER_LT: Message = issue => 'Must be less than ' + inspect(issue.param);
export const MESSAGE_NUMBER_LTE: Message = issue => 'Must be less than or equal to ' + inspect(issue.param);
export const MESSAGE_NUMBER_MULTIPLE_OF: Message = issue => 'Must be a multiple of ' + inspect(issue.param);
export const MESSAGE_OBJECT_ALL_KEYS: Message = issue => 'Must contain all or no keys: ' + inspectArray(issue);
export const MESSAGE_OBJECT_NOT_ALL_KEYS: Message = issue => 'Must contain not all or no keys: ' + inspectArray(issue);
export const MESSAGE_OBJECT_OR_KEYS: Message = issue => 'Must contain at least one key: ' + inspectArray(issue);
export const MESSAGE_OBJECT_XOR_KEYS: Message = issue => 'Must contain exactly one key: ' + inspectArray(issue);
export const MESSAGE_OBJECT_OXOR_KEYS: Message = issue => 'Must contain one or no keys: ' + inspectArray(issue);
export const MESSAGE_OBJECT_EXACT: Message = issue => 'Must not have unknown keys: ' + inspectArray(issue);
export const MESSAGE_OBJECT_PLAIN: Message = 'Must be a plain object';
export const MESSAGE_SET_MIN: Message = issue => 'Must have the minimum size of ' + inspect(issue.param);
export const MESSAGE_SET_MAX: Message = issue => 'Must have the maximum size of ' + inspect(issue.param);
export const MESSAGE_STRING_NON_BLANK: Message = 'Must not be blank';
export const MESSAGE_STRING_MIN: Message = issue => 'Must have the minimum length of ' + inspect(issue.param);
export const MESSAGE_STRING_MAX: Message = issue => 'Must have the maximum length of ' + inspect(issue.param);
export const MESSAGE_STRING_REGEX: Message = issue => 'Must match the pattern ' + inspect(issue.param);
export const MESSAGE_STRING_INCLUDES: Message = issue => 'Must include ' + inspect(issue.param);
export const MESSAGE_STRING_STARTS_WITH: Message = issue => 'Must start with ' + inspect(issue.param);
export const MESSAGE_STRING_ENDS_WITH: Message = issue => 'Must end with ' + inspect(issue.param);
export const MESSAGE_TYPE_ARRAY: Message = 'Must be an array';
export const MESSAGE_TYPE_BIGINT: Message = 'Must be a bigint';
export const MESSAGE_TYPE_BOOLEAN: Message = 'Must be a boolean';
export const MESSAGE_TYPE_CONST: Message = issue => 'Must be equal to ' + inspect(issue.param);
export const MESSAGE_TYPE_DATE: Message = 'Must be a Date';
export const MESSAGE_TYPE_ENUM: Message = issue => 'Must be equal to one of: ' + inspectArray(issue);
export const MESSAGE_TYPE_FUNCTION: Message = 'Must be a function';
export const MESSAGE_TYPE_INSTANCE_OF: Message = 'Must be a class instance';
export const MESSAGE_TYPE_INTERSECTION: Message = 'Intersection results are incompatible';
export const MESSAGE_TYPE_MAP: Message = 'Must be a Map';
export const MESSAGE_TYPE_NEVER: Message = 'Must not be used';
export const MESSAGE_TYPE_NUMBER: Message = 'Must be a number';
export const MESSAGE_TYPE_OBJECT: Message = 'Must be an object';
export const MESSAGE_TYPE_PROMISE: Message = 'Must be a Promise';
export const MESSAGE_TYPE_TUPLE: Message = issue => 'Must be a tuple of length ' + inspect(issue.param);
export const MESSAGE_TYPE_SET: Message = 'Must be a Set';
export const MESSAGE_TYPE_STRING: Message = 'Must be a string';
export const MESSAGE_TYPE_SYMBOL: Message = 'Must be a symbol';
export const MESSAGE_TYPE_UNION: Message = 'Must conform the union';

function inspectArray(issue: Issue): string {
  return issue.param.map(inspect).join(', ');
}
